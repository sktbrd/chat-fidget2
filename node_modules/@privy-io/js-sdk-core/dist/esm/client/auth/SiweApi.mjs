import{SiweUnlink as e,SiweLink as t,SiweAuthenticate as n,SiweInit as i}from"@privy-io/public-api";class s{async unlinkWallet(t){return await this._privyInternal.fetch(e,{body:{address:t}}),(await this._privyInternal.refreshSession()).user}async linkWithSiwe(e,n,i){let s=n||this._wallet,a=i||this._preparedMessage;if(!s)throw Error("A wallet must be provided in the init step or as an argument to linkWithSiwe");if(!a)throw Error("A message must be generated and signed before being used to link a wallet to privy");return await this._privyInternal.fetch(t,{body:{message:a,signature:e,chainId:s.chainId,walletClientType:s.walletClientType,connectorType:s.connectorType}}),(await this._privyInternal.refreshSession()).user}async loginWithSiwe(e,t,i,s){let a=t||this._wallet,r=i||this._preparedMessage;if(!a)throw Error("A wallet must be provided in the init step or as an argument to loginWithSiwe");if(!r)throw Error("A message must be generated and signed before being used to login to privy with a wallet");let o=await this._privyInternal.fetch(n,{body:{signature:e,message:r,chainId:a.chainId,walletClientType:a.walletClientType,connectorType:a.connectorType,mode:s}});return await this._privyInternal.session.updateWithTokensResponse(o),this._privyInternal.callbacks?.setUser?.(o.user),o}async init(e,t,n){var s;this._wallet=e;let{nonce:a}=await this._privyInternal.fetch(i,{body:{address:e.address}}),r=`${(s={chainId:e.chainId.toString().replace("eip155:",""),address:e.address,issuedAt:(new Date).toISOString(),statement:"By signing, you are proving you own this wallet and logging in. This does not initiate a transaction or cost any fees.",domain:t,nonce:a,uri:n}).domain} wants you to sign in with your Ethereum account:\n${s.address}\n\n${s.statement}\n\nURI: ${s.uri}\nVersion: 1\nChain ID: ${s.chainId}\nNonce: ${s.nonce}\nIssued At: ${s.issuedAt}\nResources:\n- https://privy.io`;return this._preparedMessage=r,{nonce:a,message:r}}constructor(e){this._wallet=void 0,this._privyInternal=e}}export{s as default};
