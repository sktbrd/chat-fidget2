import{VoidSigner as r}from"@ethersproject/abstract-signer";import{StaticJsonRpcProvider as t}from"@ethersproject/providers";import{PrivyConnectorError as e}from"../errors.mjs";import{isArbitrum as i,defaultGasForArbitrum as p}from"../gas/arbitrum.mjs";import{isBsc as s,defaultGasForBsc as o}from"../gas/bsc.mjs";import{isOpStack as a,defaultGasForOpStack as n}from"../gas/op-stack.mjs";import{isPolygon as m,defaultGasForPolygon as c}from"../gas/polygon.mjs";import{defaultGasLimit as l,defaultGasForEvmChain as h}from"./gas.mjs";import"../types.mjs";import"@ethersproject/bignumber";import"../../chains/arbitrum.mjs";import"../../chains/arbitrumGoerli.mjs";import"../../chains/arbitrumSepolia.mjs";import"./ethers.mjs";import"@ethersproject/contracts";import"@ethersproject/transactions";import"../../chains/base.mjs";import"../../chains/baseGoerli.mjs";import"../../chains/baseSepolia.mjs";import"../../chains/optimism.mjs";import"../../chains/optimismGoerli.mjs";import"../../chains/optimismSepolia.mjs";import"../../chains/zora.mjs";import"../../chains/zoraSepolia.mjs";import"../../chains/zoraTestnet.mjs";import"@ethersproject/units";import"fetch-retry";import"../../chains/polygon.mjs";import"../../chains/polygonAmoy.mjs";import"../../chains/polygonMumbai.mjs";const u=(r,i,p,s)=>{let o=Number(r),a=i.find((r=>r.id===o));if(!a)throw new e(`Unsupported chainId ${r}`,4901);return new t(a.rpcUrls.privyWalletOverride&&a.rpcUrls.privyWalletOverride.http[0]?a.rpcUrls.privyWalletOverride.http[0]:p.rpcUrls&&p.rpcUrls[o]?p.rpcUrls[o]:a.rpcUrls.privy?.http[0]?{url:a.rpcUrls.privy.http[0],headers:{"privy-app-id":s.appId}}:a.rpcUrls.public?.http[0]?a.rpcUrls.public?.http[0]:a.rpcUrls.default?.http[0])},d=(r,t,i)=>{let p,s=r.id,o=Number(r.id);if(r.rpcUrls.privyWalletOverride&&r.rpcUrls.privyWalletOverride.http[0])p=r.rpcUrls.privyWalletOverride.http[0];else if(t.rpcUrls&&t.rpcUrls[o])p=t.rpcUrls[o];else if(r.rpcUrls.privy?.http[0]){let t=new URL(r.rpcUrls.privy.http[0]);t.searchParams.append("privyAppId",i),p=t.toString()}else p=r.rpcUrls.public?.http[0]?r.rpcUrls.public.http[0]:r.rpcUrls.default?.http[0];if(!p)throw new e(`No RPC url found for ${s}`);return p};function y(r){return/^-?0x[a-f0-9]+$/i.test(r)}function f(r){for(let t of["gasLimit","gasPrice","value","maxPriorityFeePerGas","maxFeePerGas"]){let e=r[t];if(void 0!==e&&!function(r){let t="number"==typeof r,e="bigint"==typeof r,i="string"==typeof r&&y(r);return t||e||i}(e))throw Error(`Transaction request property '${t}' must be a valid number, bigint, or hex string representing a quantity`)}if("number"!=typeof r.chainId)throw Error("Transaction request property 'chainId' must be a number")}async function g(t,e,u){if(e.chainId=Number(e.chainId),f(e),e.from||(e.from=t),!e.nonce){let i=new r(t,u);e.nonce=await i.getTransactionCount("pending")}return e.gasLimit||(e.gas?(e.gasLimit=e.gas,delete e.gas):e.gasLimit=await l(e,u)),"string"==typeof e.type&&y(e.type)&&(e.type=Number(e.type)),[23294,23295].includes(e.chainId)&&(e.type=0),0===(e=m(e.chainId)?await c(e):i(e.chainId)?await p(e,u):a(e.chainId)?await n(e,u):s(e.chainId)?await o(e,u):await h(e,u)).type&&delete e.accessList,2!==e.type&&(delete e.maxPriorityFeePerGas,delete e.maxFeePerGas),e}function j({currentRecoveryMethod:r,upgradeToRecoveryMethod:t}){switch(r){case"privy":case"user-passcode":return!0;case"icloud":case"google-drive":if(r===t)throw Error("Cannot upgrade to the existing cloud platform");return!0;default:throw Error("Unknown recovery method")}}export{d as getJsonRpcEndpointFromChain,u as getJsonRpcProvider,g as populateTransactionRequest,j as throwIfInvalidRecoveryUpgradePath,f as validateTransactionRequest};
