import{BigNumber as e}from"@ethersproject/bignumber";import{PrivyProviderRpcError as t}from"../errors.mjs";import{isOpStack as i,estimateOpStackL1Gas as r}from"../gas/op-stack.mjs";import{QuantityToBigNumber as a}from"./ethers.mjs";import"../types.mjs";import"@ethersproject/contracts";import"@ethersproject/transactions";import"../../chains/base.mjs";import"../../chains/baseGoerli.mjs";import"../../chains/baseSepolia.mjs";import"../../chains/optimism.mjs";import"../../chains/optimismGoerli.mjs";import"../../chains/optimismSepolia.mjs";import"../../chains/zora.mjs";import"../../chains/zoraSepolia.mjs";import"../../chains/zoraTestnet.mjs";const s=async(e,t)=>{if(void 0===e.type&&(e.type=2),2===e.type){if(!e.maxFeePerGas||!e.maxPriorityFeePerGas){let i=await t.getFeeData();e.maxFeePerGas||(e.maxFeePerGas=i.maxFeePerGas?.toHexString()),e.maxPriorityFeePerGas||(e.maxPriorityFeePerGas=i.maxPriorityFeePerGas?.toHexString())}}else if(!e.gasPrice){let i=await t.getFeeData();e.gasPrice=i.gasPrice?.toHexString()}return e};async function o(s,o){if(!s.gasLimit)throw new t("gasLimit was not successfully set for transaction.");let n=a(s.gasLimit),m=e.from(0);if(2==s.type){if(!s.maxFeePerGas)throw new t("maxFeePerGas was not successfully set for transaction of type 2.");m=a(s.maxFeePerGas)}else{if(!s.gasPrice)throw new t("gasPrice was not successfully set for transaction of type 0 or 1.");m=a(s.gasPrice)}let c=n.mul(m),l=e.from(0);if(s.chainId&&i(s.chainId))try{l=await r(s,o),c=c.add(l)}catch(e){}return{totalGasEstimate:c,l1ExecutionFeeEstimate:l}}async function n(e,t){try{return(await t.estimateGas(e)).toHexString()}catch(i){let r;if("message"in i&&i.message.includes("insufficient funds")&&(console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'value'`),r=await async function({txRequest:e,provider:t}){try{let i={...e,value:void 0};return(await t.estimateGas(i)).toHexString()}catch(e){return console.warn(`Gas estimation failed with error: ${e} when omitting the 'value'`),null}}({txRequest:e,provider:t})),r||(console.warn(`Gas estimation failed with error: ${i}. Retrying gas estimation by omitting the 'from'`),r=await async function({txRequest:e,provider:t}){try{let i={...e,from:void 0};return(await t.estimateGas(i)).toHexString()}catch(e){return console.warn(`Gas estimation failed with error: ${e} when omitting the 'from' address`),null}}({txRequest:e,provider:t})),!r)throw i;return r}}export{o as calculateTotalGasEstimate,s as defaultGasForEvmChain,n as defaultGasLimit};
