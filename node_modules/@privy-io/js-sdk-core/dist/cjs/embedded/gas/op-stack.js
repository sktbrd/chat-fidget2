"use strict";var e=require("@ethersproject/bignumber"),r=require("@ethersproject/contracts"),i=require("@ethersproject/transactions"),a=require("../../chains/base.js"),t=require("../../chains/baseGoerli.js"),s=require("../../chains/baseSepolia.js"),o=require("../../chains/optimism.js"),n=require("../../chains/optimismGoerli.js"),c=require("../../chains/optimismSepolia.js"),m=require("../../chains/zora.js"),u=require("../../chains/zoraSepolia.js"),l=require("../../chains/zoraTestnet.js"),P=require("../utils/ethers.js");const h=["function getL1Fee(bytes memory _data) external view returns (uint256)"],d=e=>[a.base.id,t.baseGoerli.id,s.baseSepolia.id,o.optimism.id,n.optimismGoerli.id,c.optimismSepolia.id,m.zora.id,l.zoraTestnet.id,u.zoraSepolia.id,81457,168587773].includes(e);exports.OPTIMISM_STACK_GAS_PRICE_ORACLE_ABI=h,exports.OPTIMISM_STACK_GAS_PRICE_ORACLE_ADDRESS="0x420000000000000000000000000000000000000F",exports.defaultGasForOpStack=async(r,i)=>{if(!d(r.chainId))throw Error("Invalid chain ID for OP Stack gas estimation.");if(void 0===r.type&&(r.type=2),r.gasPrice&&(console.warn("`gasPrice` is not supported on this chain and will be ignored. Use `maxPriorityFeePerGas` and/or `maxFeePerGas` instead."),delete r.gasPrice),r.maxPriorityFeePerGas&&r.maxFeePerGas)return r;try{if(!r.maxPriorityFeePerGas){let e=await i.send("eth_maxPriorityFeePerGas",[]);r.maxPriorityFeePerGas=e}if(r.maxFeePerGas&&(console.warn("maxFeePerGas is specified without maxPriorityFeePerGas - this can result in hung transactions."),r.maxPriorityFeePerGas>=r.maxFeePerGas))throw Error("Overridden maxFeePerGas is less than or equal to the calculated maxPriorityFeePerGas. Please set both values or maxPriorityFeePerGas alone for correct gas estimation.");if(!r.maxFeePerGas){let{lastBaseFeePerGas:a}=await i.getFeeData();if(!a)throw Error("Unable to fetch baseFee for last block.");let t=e.BigNumber.from(a).mul(e.BigNumber.from(126)).div(e.BigNumber.from(100)).add(e.BigNumber.from(r.maxPriorityFeePerGas));r.maxFeePerGas=P.convertBigNumberish(t)}}catch(e){throw Error(`Failed to set gas price for OP stack transaction: ${e}.`)}return r},exports.estimateOpStackL1Gas=async function(a,t){if(!a.chainId||a.chainId&&!d(a.chainId))return e.BigNumber.from(0);let s=e.BigNumber.from(0);try{let e=new r.Contract("0x420000000000000000000000000000000000000F",h,t),o=P.toEthersUnsignedTransaction(a),n=i.serialize(o);s=await e.getL1Fee(n)}catch(e){}return s},exports.isOpStack=d;
