"use strict";var e=require("@ethersproject/bignumber"),r=require("../errors.js"),t=require("../gas/op-stack.js"),i=require("./ethers.js");require("../types.js"),require("@ethersproject/contracts"),require("@ethersproject/transactions"),require("../../chains/base.js"),require("../../chains/baseGoerli.js"),require("../../chains/baseSepolia.js"),require("../../chains/optimism.js"),require("../../chains/optimismGoerli.js"),require("../../chains/optimismSepolia.js"),require("../../chains/zora.js"),require("../../chains/zoraSepolia.js"),require("../../chains/zoraTestnet.js");exports.calculateTotalGasEstimate=async function(a,s){if(!a.gasLimit)throw new r.PrivyProviderRpcError("gasLimit was not successfully set for transaction.");let o=i.QuantityToBigNumber(a.gasLimit),n=e.BigNumber.from(0);if(2==a.type){if(!a.maxFeePerGas)throw new r.PrivyProviderRpcError("maxFeePerGas was not successfully set for transaction of type 2.");n=i.QuantityToBigNumber(a.maxFeePerGas)}else{if(!a.gasPrice)throw new r.PrivyProviderRpcError("gasPrice was not successfully set for transaction of type 0 or 1.");n=i.QuantityToBigNumber(a.gasPrice)}let c=o.mul(n),u=e.BigNumber.from(0);if(a.chainId&&t.isOpStack(a.chainId))try{u=await t.estimateOpStackL1Gas(a,s),c=c.add(u)}catch(e){}return{totalGasEstimate:c,l1ExecutionFeeEstimate:u}},exports.defaultGasForEvmChain=async(e,r)=>{if(void 0===e.type&&(e.type=2),2===e.type){if(!e.maxFeePerGas||!e.maxPriorityFeePerGas){let t=await r.getFeeData();e.maxFeePerGas||(e.maxFeePerGas=t.maxFeePerGas?.toHexString()),e.maxPriorityFeePerGas||(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas?.toHexString())}}else if(!e.gasPrice){let t=await r.getFeeData();e.gasPrice=t.gasPrice?.toHexString()}return e},exports.defaultGasLimit=async function(e,r){try{return(await r.estimateGas(e)).toHexString()}catch(t){let i;if("message"in t&&t.message.includes("insufficient funds")&&(console.warn(`Gas estimation failed with error: ${t}. Retrying gas estimation by omitting the 'value'`),i=await async function({txRequest:e,provider:r}){try{let t={...e,value:void 0};return(await r.estimateGas(t)).toHexString()}catch(e){return console.warn(`Gas estimation failed with error: ${e} when omitting the 'value'`),null}}({txRequest:e,provider:r})),i||(console.warn(`Gas estimation failed with error: ${t}. Retrying gas estimation by omitting the 'from'`),i=await async function({txRequest:e,provider:r}){try{let t={...e,from:void 0};return(await r.estimateGas(t)).toHexString()}catch(e){return console.warn(`Gas estimation failed with error: ${e} when omitting the 'from' address`),null}}({txRequest:e,provider:r})),!i)throw t;return i}};
