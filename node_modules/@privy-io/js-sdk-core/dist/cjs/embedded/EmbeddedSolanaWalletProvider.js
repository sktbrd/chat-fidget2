"use strict";var e=require("../Error.js");exports.EmbeddedSolanaWalletProvider=class{async request(r){if(!await this._privyInternal.getAccessToken())throw new e.PrivyClientError({error:"Missing access token",code:"attempted_rpc_call_before_logged_in"});return this.handleIFrameRpc(r)}async handleIFrameRpc(r){try{let e=await this._privyInternal.getAccessToken();if(!e)throw Error("Missing privy token. User must be logged in");this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_started",{method:r.method,address:this._publicKey});let t=await this._proxy.rpcWallet({accessToken:e,request:r,chainType:"solana",hdWalletIndex:this._hdWalletIndex,entropyId:this._entropyId,entropyIdVerifier:this._entropyIdVerifier});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_completed",{method:r.method,address:this._publicKey}),t.response.data}catch(t){console.error(t);let s=t instanceof Error?t.message:"Unable to make wallet request";throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_failed",{method:r.method,address:this._publicKey,error:s}),new e.PrivyClientError({code:"embedded_wallet_request_error",error:s})}}toJSON(){return`PrivyEmbeddedSolanaProvider { address: '${this._publicKey}', request: [Function] }`}constructor({proxy:e,privyInternal:r,publicKey:t,hdWalletIndex:s,entropyId:i,entropyIdVerifier:d}){this._proxy=e,this._privyInternal=r,this._publicKey=t,this._hdWalletIndex=s,this._entropyId=i,this._entropyIdVerifier=d}};
