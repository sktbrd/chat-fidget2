import{jsxs as o,Fragment as e,jsx as t}from"react/jsx-runtime";import{ModalScreen as n}from"../index.mjs";import r from"@heroicons/react/24/outline/CheckCircleIcon";import{useRef as i,useState as s,useEffect as m}from"react";import{parseEther as a}from"viem";import{RefactorSpacerTop as c,CenteredItemWithGap as l,RefactorSpacerBottom as p}from"../../components/Layouts.mjs";import{BlobbyFooter as d}from"../../components/ModalFooter.mjs";import{CenteredScreenHeader as u}from"../../components/ScreenHeader.mjs";import j from"../../components/embedded-wallets/FundWalletMethodHeader.mjs";import{NeutralSpinner as h}from"../../components/primitives/NeutralSpinner/index.mjs";import{DEFAULT_SUCCESS_SCREEN_EXTRA_LONG_DURATION_MS as f}from"../../constants.mjs";import{PrivyClientError as g,PrivyErrorCode as v}from"../../errors.mjs";import{usePrivyInternal as y}from"../../hooks/internal-context.mjs";import{usePrivyModal as w}from"../../hooks/modal-context.mjs";import{toDisplayName as I}from"../../lib/external-wallets/displayHelpers.mjs";import{ON_RAMP_COMPLETE_ANALYTICS_EVENT as b}from"../../lib/funding/analytics.mjs";import{getQuote as S,toGetQuoteInput as T}from"../../lib/funding/reservoir.mjs";import{RELAY_SOLANA_MAINNET_CLUSTER_CHAIN_ID as C,RELAY_SOLANA_USDC_TOKEN_ID as A,RELAY_SOLANA_NATIVE_CURRENCY_ID as N}from"../../lib/solana/index.mjs";import{usePlugins as F}from"../../plugins/context/PrivyPluginContext.mjs";import{SOLANA_FUNDING_PLUGIN_ID as x}from"../../plugins/solana-funding/id.mjs";import{formatSolanaWalletAddress as E}from"../../utils/index.mjs";import{TransferOrBridgeLoadingScreen as R}from"./TransferOrBridgeLoadingScreen.mjs";import{useSolanaWallets as k}from"../../hooks/useSolanaWallets.mjs";import"styled-components";import"../../svg/protected-by-privy.mjs";import"../../components/ModalHeader.mjs";import"@heroicons/react/24/outline/ArrowLeftIcon";import"@heroicons/react/24/outline/ArrowRightIcon";import"@heroicons/react/24/outline/QuestionMarkCircleIcon";import"@heroicons/react/24/outline/XMarkIcon";import"../../configuration/context.mjs";import"../../config.mjs";import"../../configuration/defaultClientConfig.mjs";import"../../configuration/login-methods.mjs";import"../../configuration/wallets.mjs";import"../../connectors/chains/index.mjs";import"../../connectors/chains/arbitrum.mjs";import"../../connectors/chains/arbitrumSepolia.mjs";import"../../connectors/chains/avalanche.mjs";import"../../connectors/chains/avalancheFuji.mjs";import"../../connectors/chains/base.mjs";import"../../connectors/chains/baseSepolia.mjs";import"../../connectors/chains/berachainArtio.mjs";import"../../connectors/chains/celo.mjs";import"../../connectors/chains/celoAlfajores.mjs";import"../../connectors/chains/filecoin.mjs";import"../../connectors/chains/filecoinCalibration.mjs";import"../../connectors/chains/garnetHolesky.mjs";import"../../connectors/chains/holesky.mjs";import"../../connectors/chains/linea.mjs";import"../../connectors/chains/lineaTestnet.mjs";import"../../connectors/chains/lukso.mjs";import"../../connectors/chains/mainnet.mjs";import"../../connectors/chains/optimism.mjs";import"../../connectors/chains/optimismSepolia.mjs";import"../../connectors/chains/polygon.mjs";import"../../connectors/chains/polygonAmoy.mjs";import"../../connectors/chains/redstone.mjs";import"../../connectors/chains/sepolia.mjs";import"../../connectors/chains/zora.mjs";import"../../connectors/chains/zoraSepolia.mjs";import"../../connectors/chains/zoraTestnet.mjs";import"../../connectors/chains/utils.mjs";import"../../theme.mjs";import"tinycolor2";import"../../lib/cybr53.mjs";import"../../hooks/index.mjs";import"ofetch";import"../../components/PrefetchedImage.mjs";import"../../svg/brave-browser-icon.mjs";import"../../svg/bybit.mjs";import"../../svg/coinbase-wallet.mjs";import"../../svg/cryptocom.mjs";import"../../svg/metamask.mjs";import"../../svg/phantom.mjs";import"../../svg/rabby.mjs";import"../../svg/rainbow.mjs";import"../../svg/safe.mjs";import"../../svg/uniswap.mjs";import"../../svg/universal-profile.mjs";import"../../svg/wallet-connect.mjs";import"../../svg/zerion.mjs";import"@ethersproject/providers";import"../../connectors/get-legacy-injected-providers.mjs";import"../../connectors/is-wallet-installed.mjs";import"../../components/external-wallets/InjectedWalletIcon.mjs";import"@heroicons/react/24/outline/WalletIcon";import"../../components/ui/layout/Row.mjs";import"../../components/ui/typography/LabelSm.mjs";import"../../components/ui/typography/Value.mjs";import"../../components/ui/animation/LoadingSkeleton.mjs";import"../../components/ui/wallet/Address.mjs";import"@heroicons/react/24/outline/CheckIcon";import"@heroicons/react/24/outline/Square2StackIcon";import"../../components/ui/wallet/NetworkIcon.mjs";import"@heroicons/react/24/outline/GlobeAltIcon";import"../../components/ui/icons/Arbitum.mjs";import"../../components/ui/icons/Avalanche.mjs";import"../../components/ui/icons/Base.mjs";import"../../components/ui/icons/Celo.mjs";import"../../components/ui/icons/Linea.mjs";import"../../components/ui/icons/Mainnnet.mjs";import"../../components/ui/icons/Optimism.mjs";import"../../components/ui/icons/Polygon.mjs";import"../../components/ui/icons/Solana.mjs";import"../../components/ui/icons/Zora.mjs";import"../../client/user.mjs";import"@ethersproject/address";import"../../hooks/privy-context.mjs";import"../../hooks/useWallets.mjs";function U(){let{closePrivyModal:U,createAnalyticsEvent:L}=y(),{navigate:_,setModalData:M,app:W,data:P}=w(),{wallets:O}=k(),$=i(!1),B=F(),[D,H]=s(!1),[q,z]=s(!1),[G,Q]=s(null);if(!P?.funding||"ethereum"!==P.funding.chainType)throw Error("Invalid funding data");let{amount:V,connectedWalletAddress:X,chain:Y,cluster:Z,isUSDC:J}=P.funding,K=P.funding.address,oo=P.funding.erc20Address,eo=P.funding.isUSDC?"USDC":Y.nativeCurrency.symbol,to=Z??{name:"mainnet-beta"},no=X?O.find((({address:o})=>o===X)):O[0];if(m((()=>{(async function(){if(!no||!Y||$.current)return;let o=B(x);if(!o)return void Q(new g("Unable to solana plugin"));$.current=!0,Y?.testnet&&console.warn("Solana testnets are not supported for bridging");let e=J?1e6*parseFloat(V):a(V),t=await S({isTestnet:!!Y.testnet,input:T({amount:e.toString(),user:no.address,recipient:K,destinationChainId:Y.id,originChainId:C,originCurrency:J?A:N,destinationCurrency:J?oo:void 0})}).catch(console.error);if(!t)return void Q(new g(`Unable to fetch quotes for bridging. Wallet ${E(no.address)} does not have enough funds.`,void 0,v.INSUFFICIENT_BALANCE));let n=await o.createBridgeTransactionFromRelayQuote({quote:t,from:no.address,cluster:to});if(n)try{H(!0);let{connection:o,transaction:r}=n,i=await o.simulateTransaction(r);if(i.value.err)return i.value.logs?.find((o=>/insufficient (lamports|funds)/gi.test(o)))?void Q(new g(`Wallet ${E(no?.address)} does not have enough funds. ${t.details.currencyIn.amountFormatted} ${eo} are needed to complete the transaction.`,void 0,v.INSUFFICIENT_BALANCE)):(console.error("Transaction failed:",i.value.err),void Q(new g("Something went wrong",void 0,v.TRANSACTION_FAILURE)));let s=await no.sendTransaction(r,o),m=await o.confirmTransaction(s);if(m.value.err)return console.error("Transaction failed:",m.value.err),void Q(new g("Something went wrong",void 0,v.TRANSACTION_FAILURE));L({eventName:b,payload:{provider:"external",status:"success",address:no.address,chainId:Y.id,value:e.toString(),txHash:s}}),z(!0)}catch(o){if(console.error(o),/user rejected the request/gi.test(o.message||""))return void Q(new g("Transaction was rejected by the user",void 0,v.TRANSACTION_FAILURE));Q(new g("Something went wrong",void 0,v.TRANSACTION_FAILURE))}else Q(new g(`Unable to select bridge option from quotes. Wallet ${E(no.address)} does not have enough funds.`,void 0,v.INSUFFICIENT_BALANCE))})().catch(console.error)}),[]),m((()=>{if(!q)return;let o=setTimeout(U,f);return()=>clearTimeout(o)}),[q]),m((()=>{if(!G)return;let o={error:G,previousScreen:n.FUNDING_TRANSFER_FROM_WALLET_SCREEN};M({funding:P?.funding,sendTransaction:P?.sendTransaction,errorModalData:o}),_(n.ERROR_SCREEN,!1)}),[G]),q/*#__PURE__*/)return o(e,{children:[/*#__PURE__*/t(j,{}),/*#__PURE__*/t(c,{}),/*#__PURE__*/o(l,{children:[/*#__PURE__*/t(r,{color:"var(--privy-color-success)",width:"64px",height:"64px"}),/*#__PURE__*/t(u,{title:"Success!",description:`Youâ€™ve successfully added ${V} ${eo} to your ${W.name} wallet. It may take a minute before the funds are available to use.`})]}),/*#__PURE__*/t(p,{}),/*#__PURE__*/t(d,{})]});if(D&&no){let o=no?I(no.walletClientType,no.connectorType,no.walletClientType)||"wallet":null;/*#__PURE__*/return t(R,{wallet:no,displayName:o,addressToFund:K,isBridging:D,isErc20Flow:!1,chainId:Y.id,chainName:Y.name,totalPriceInUsd:void 0,totalPriceInNativeCurrency:void 0,gasPriceInUsd:void 0,gasPriceInNativeCurrency:void 0})}/*#__PURE__*/
return o(e,{children:[/*#__PURE__*/t(j,{}),/*#__PURE__*/t(h,{}),/*#__PURE__*/t("div",{style:{marginTop:"1rem"}}),/*#__PURE__*/t(d,{})]})}export{U as AwaitingSolToEvmBridgingScreen};
