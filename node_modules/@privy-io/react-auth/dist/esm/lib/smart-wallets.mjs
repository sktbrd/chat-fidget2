import{useCallback as e}from"react";import{createPublicClient as t,http as n}from"viem";import{getEntropyDetailsFromUser as r}from"../client/user.mjs";import{useAppConfig as o}from"../configuration/context.mjs";import{PrivyClientError as i}from"../errors.mjs";import{usePrivyInternal as a}from"../hooks/internal-context.mjs";import{usePrivyModal as s}from"../hooks/modal-context.mjs";import{usePrivyContext as c}from"../hooks/privy-context.mjs";import{useSmartWalletChains as m}from"../hooks/useSmartWalletChain.mjs";import{useWallets as l}from"../hooks/useWallets.mjs";import{ModalScreen as p}from"../screens/index.mjs";import{getJsonRpcEndpointFromChain as d}from"../utils/index.mjs";import{getEmbeddedConnectedWallet as h}from"./getEmbeddedConnectedWallet.mjs";import{signerToSmartAccountClient as u}from"./smart-wallets-shared.mjs";import"@ethersproject/address";import"react/jsx-runtime";import"../config.mjs";import"../configuration/defaultClientConfig.mjs";import"../constants.mjs";import"../configuration/login-methods.mjs";import"../configuration/wallets.mjs";import"../connectors/chains/index.mjs";import"../connectors/chains/arbitrum.mjs";import"../connectors/chains/arbitrumSepolia.mjs";import"../connectors/chains/avalanche.mjs";import"../connectors/chains/avalancheFuji.mjs";import"../connectors/chains/base.mjs";import"../connectors/chains/baseSepolia.mjs";import"../connectors/chains/berachainArtio.mjs";import"../connectors/chains/celo.mjs";import"../connectors/chains/celoAlfajores.mjs";import"../connectors/chains/filecoin.mjs";import"../connectors/chains/filecoinCalibration.mjs";import"../connectors/chains/garnetHolesky.mjs";import"../connectors/chains/holesky.mjs";import"../connectors/chains/linea.mjs";import"../connectors/chains/lineaTestnet.mjs";import"../connectors/chains/lukso.mjs";import"../connectors/chains/mainnet.mjs";import"../connectors/chains/optimism.mjs";import"../connectors/chains/optimismSepolia.mjs";import"../connectors/chains/polygon.mjs";import"../connectors/chains/polygonAmoy.mjs";import"../connectors/chains/redstone.mjs";import"../connectors/chains/sepolia.mjs";import"../connectors/chains/zora.mjs";import"../connectors/chains/zoraSepolia.mjs";import"../connectors/chains/zoraTestnet.mjs";import"../connectors/chains/utils.mjs";import"./solana/index.mjs";import"../theme.mjs";import"tinycolor2";import"./cybr53.mjs";import"ofetch";import"../hooks/index.mjs";import"../components/PrefetchedImage.mjs";import"@ethersproject/providers";import"../connectors/get-legacy-injected-providers.mjs";import"../connectors/is-wallet-installed.mjs";import"permissionless";import"permissionless/accounts";import"permissionless/clients/pimlico";import"viem/account-abstraction";import"@privy-io/js-sdk-core";const f=({calls:e,chain:t,maxPriorityFeePerGas:n,maxFeePerGas:r,nonce:o})=>e.map((e=>({to:e.to||void 0,data:e.data,value:e.value,chainId:t.id,nonce:o,maxFeePerGas:r,maxPriorityFeePerGas:n}))),y=async({chain:e,paymasterContext:r,embeddedWallet:o,user:a,smartWalletsConfig:s,rpcConfig:c,privyAppId:m})=>{if(!s?.enabled||!a||!o)return;let l=await o.getEthereumProvider(),p=s?.configuredNetworks.find((t=>t.chainId===`eip155:${e.id}`));if(!p)throw new i(`The chain ${e.name} (eip155:${e.id}) must be configured in the smart wallet configuration in your dashboard`);let h=a.smartWallet?.smartWalletType??s.smartWalletType,f=d(e,c,m),y=t({chain:e,transport:n(f)}),j=r??p.paymasterContext,g=await u({owner:l,smartWalletType:h,chain:e,publicClient:y,paymasterContext:j,...p});if(!g)throw new i(`Failed to create smart wallet client for chain ${e.name} (eip155:${e.id})`);return g},j=({clientConfig:t,smartWalletsConfig:n})=>{let{noPromptOnSignature:d,openPrivyModal:u,appId:j}=a(),g=o(),{setModalData:E}=s(),{user:I}=c(),{chains:w}=o(),{chainId:C,clients:W,setChainId:S,chainIdState:x}=m(),T=w.find((e=>e.id===x)),{wallets:P}=l(),v=e((async()=>C.current),[C]),D=e((async({id:e})=>{if(!W.current[e]){let r=h(P),o=await y({chain:w.find((t=>t.id===e)),embeddedWallet:r,user:I,paymasterContext:t?.paymasterContext,smartWalletsConfig:n,rpcConfig:g.rpcConfig,privyAppId:j});o&&(W.current[e]=o)}S(e)}),[w,t,P,I,n]);return{wrapSmartAccountClient:e=>{W.current[e.chain.id]=e,x||S(e.chain.id);return{...e,sendTransaction:async e=>{let t=void 0===g.embeddedWallets.showWalletUIs?g.embeddedWallets.noPromptOnSignature:!g.embeddedWallets.showWalletUIs,n=W.current[C.current];if(!n)throw new i(`Smart wallet client for chain (eip155:${C.current}) not found`);if(t)return d.current=!0,await n.sendTransaction(e).finally((()=>d.current=!1));let o=[];"calls"in e&&void 0!==e.calls?o=[...e.calls]:"to"in e&&(o=[{to:e.to,value:e.value||BigInt(0),data:e.data||"0x"}]);let a=async()=>{if(!n.paymaster)return!1;let{paymasterAndData:t,paymasterData:r}=await n.prepareUserOperation({calls:o,maxFeePerGas:e.maxFeePerGas,maxPriorityFeePerGas:e.maxPriorityFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0});return Number(t??r??0)>0};return new Promise((async(t,i)=>{d.current=!0;let{entropyId:s,entropyIdVerifier:c}=r(I);E({connectWallet:{entropyId:s,entropyIdVerifier:c,onCompleteNavigateTo:p.EMBEDDED_WALLET_SEND_TRANSACTION_SCREEN,onFailure:()=>{}},sendTransaction:{transactionRequests:f({calls:o,chain:n.chain,maxPriorityFeePerGas:e.maxPriorityFeePerGas,maxFeePerGas:e.maxFeePerGas,nonce:e.nonce?BigInt(e.nonce):void 0}),entropyId:s,entropyIdVerifier:c,transactingWallet:{address:n.account.address,walletIndex:null},getIsSponsored:a,onConfirm:()=>n.sendTransaction(e),onSuccess:e=>t(e.hash),onFailure:i,uiOptions:{}}}),u(p.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{d.current=!1}))},signMessage:async({message:e})=>{let t=void 0===g.embeddedWallets.showWalletUIs?g.embeddedWallets.noPromptOnSignature:!g.embeddedWallets.showWalletUIs,n=W.current[C.current];if(!n)throw new i(`Smart wallet client for chain (eip155:${C.current}) not found`);return t?(d.current=!0,await n.signMessage({message:e}).finally((()=>d.current=!1))):new Promise((async(t,o)=>{let{entropyId:i,entropyIdVerifier:a}=r(I);d.current=!0,E({connectWallet:{entropyId:i,entropyIdVerifier:a,onCompleteNavigateTo:p.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"personal_sign",data:e,confirmAndSign:()=>n.signMessage({message:e}),onSuccess:e=>t(e),onFailure:o,uiOptions:{}}}),u(p.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{d.current=!1}))},signTypedData:async e=>{let t=void 0===g.embeddedWallets.showWalletUIs?g.embeddedWallets.noPromptOnSignature:!g.embeddedWallets.showWalletUIs,n=W.current[C.current];if(!n)throw new i(`Smart wallet client for chain (eip155:${C.current}) not found`);return t?(d.current=!0,await n.signTypedData(e).finally((()=>d.current=!1))):new Promise((async(t,o)=>{d.current=!0;let{entropyId:i,entropyIdVerifier:a}=r(I);E({connectWallet:{entropyId:i,entropyIdVerifier:a,onCompleteNavigateTo:p.EMBEDDED_WALLET_SIGN_REQUEST_SCREEN,onFailure:()=>{}},signMessage:{method:"eth_signTypedData_v4",data:e,confirmAndSign:()=>n.signTypedData(e),onSuccess:e=>t(e),onFailure:o,uiOptions:{}}}),u(p.EMBEDDED_WALLET_CONNECTING_SCREEN)})).finally((()=>{d.current=!1}))},getChainId:v,chain:T,switchChain:D}}}};export{f as callsToTransactionRequests,y as getSmartWalletClient,j as useSmartWalletsWrapper};
