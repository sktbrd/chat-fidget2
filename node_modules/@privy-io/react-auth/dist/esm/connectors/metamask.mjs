import{getAddress as t}from"@ethersproject/address";import{Web3Provider as e}from"@ethersproject/providers";import{isMobile as r}from"react-device-detect";import{PrivyConnectorError as o}from"../errors.mjs";import{formatConnectorError as s}from"./errors.mjs";import{Injected6963WalletConnector as i}from"./injected.mjs";import"ofetch";import"@ethersproject/logger";import"@privy-io/js-sdk-core";import"../svg/browser-extension-wallet-icon.mjs";import"react/jsx-runtime";import"../svg/metamask.mjs";import"../svg/phantom.mjs";import"./ethereum/index.mjs";import"../constants.mjs";import"../storage.mjs";import"../utils/index.mjs";import"./get-legacy-injected-providers.mjs";import"./is-wallet-installed.mjs";import"./areWalletArraysEqual.mjs";import"./isBaseConnectedEthereumWallet.mjs";import"./base.mjs";import"eventemitter3";import"./getRpcTimeout.mjs";import"./privyProxyProvider.mjs";const m=async()=>{let r=new e(window.ethereum),o=await r.listAccounts();return 0===o.length?null:t(o[0])};class n extends i{disconnect(){console.warn("MetaMask does not support programmatic disconnect.")}async promptConnection(){try{r||await this.proxyProvider.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]});let t=await this.proxyProvider.request({method:"eth_requestAccounts"});if(!t||0===t.length||!t[0])throw new o("Unable to retrieve accounts");await this.syncAccounts([t[0]])}catch(t){throw s(t)}}}export{n as MetamaskWalletConnector,m as currentConnectedMetamaskAddress};
