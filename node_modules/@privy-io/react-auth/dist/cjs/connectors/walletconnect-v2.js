"use strict";var e=require("@walletconnect/ethereum-provider"),r=require("react-device-detect"),i=require("../errors.js"),t=require("../svg/metamask.js"),s=require("../svg/wallet-connect.js"),n=require("../utils/index.js"),a=require("./errors.js"),o=require("./ethereum/index.js"),l=require("./getRpcTimeout.js"),c=require("./privyProxyProvider.js"),h=require("./walletconnect-registry.js");require("ofetch"),require("react/jsx-runtime"),require("../hooks/modal-context.js"),require("react"),require("../components/PrefetchedImage.js"),require("../configuration/context.js"),require("../config.js"),require("../configuration/defaultClientConfig.js"),require("../constants.js"),require("../configuration/login-methods.js"),require("../configuration/wallets.js"),require("./chains/index.js"),require("./chains/arbitrum.js"),require("./chains/arbitrumSepolia.js"),require("./chains/avalanche.js"),require("./chains/avalancheFuji.js"),require("./chains/base.js"),require("./chains/baseSepolia.js"),require("./chains/berachainArtio.js"),require("./chains/celo.js"),require("./chains/celoAlfajores.js"),require("./chains/filecoin.js"),require("./chains/filecoinCalibration.js"),require("./chains/garnetHolesky.js"),require("./chains/holesky.js"),require("./chains/linea.js"),require("./chains/lineaTestnet.js"),require("./chains/lukso.js"),require("./chains/mainnet.js"),require("./chains/optimism.js"),require("./chains/optimismSepolia.js"),require("./chains/polygon.js"),require("./chains/polygonAmoy.js"),require("./chains/redstone.js"),require("./chains/sepolia.js"),require("./chains/zora.js"),require("./chains/zoraSepolia.js"),require("./chains/zoraTestnet.js"),require("./chains/utils.js"),require("../lib/solana/index.js"),require("../theme.js"),require("tinycolor2"),require("../lib/cybr53.js"),require("../screens/index.js"),require("../hooks/index.js"),require("@ethersproject/providers"),require("./get-legacy-injected-providers.js"),require("./is-wallet-installed.js"),require("@ethersproject/logger"),require("@privy-io/js-sdk-core"),require("@ethersproject/address"),require("../storage.js"),require("./areWalletArraysEqual.js"),require("./isBaseConnectedEthereumWallet.js"),require("./base.js"),require("eventemitter3");class d extends o.EthereumWalletConnector{async initialize(){let e=await this.createProvider();if(this.provider=e,this.proxyProvider.setWalletProvider(e),this.subscribeListeners(),e.session){if(this.walletProvider?.session?.peer.metadata.url){let e=h.getWalletEntryByUrl(this.walletProvider?.session?.peer.metadata.url);this.walletEntry=e?.entry,this.walletClientType=e?.walletClientType||"unknown"}this.connected=!0,await this.syncAccounts()}this.initialized=!0,this.emit("initialized");let{WalletConnectModal:r}=await import("@walletconnect/modal");this.modal=new r({projectId:this.walletConnectCloudProjectId,themeVariables:{"--wcm-z-index":"1000000"}}),this.modal.subscribeModal((e=>{e.open||this.walletProvider?.session||!this.onQrModalClosed||this.onQrModalClosed()}))}async connect(e){return e.showPrompt&&await this.promptConnection(),this.getConnectedWallet()}async isConnected(){return!!this.walletProvider?.connected}get walletBranding(){if("metamask"===this.walletClientType)return{name:"MetaMask",icon:t.METAMASK_LOGO_DATA_URI,id:"io.metamask"};let e=this.walletProvider?.session?.peer.metadata.icons?.[0];return{name:n.stripEmoji(this.walletProvider?.session?.peer.metadata.name||"")||"WalletConnect",icon:"string"==typeof e?e:s.WALLET_CONNECT_LOGO_DATA_URI,id:this.walletProvider?.session?.peer.metadata.name.toLowerCase()||"wallet_connect_v2"}}async resetConnection(e){this.walletProvider&&this.walletProvider.connected&&(await this.walletProvider.disconnect(),this.walletProvider.signer.session=void 0,this.walletEntry?.isWalletEntryOverriden||(this.walletEntry=h.WALLET_CONNECT_REGISTRY[e]),this.walletClientType=e,this.redirectUri=void 0,this.fallbackUniversalRedirectUri=void 0,h.deleteWalletConnectDeepLink(),this.onDisconnect())}async promptConnection(){if(this.provider)return new Promise(((e,r)=>{this.onQrModalClosed=()=>{r(new a.UserRejectedConnectionError)},(async()=>{let r="",t=await Promise.race([this.walletProvider?.enable(),this.proxyProvider.walletTimeout()]);if(t?.length&&(r=t[0]),!r||""===r)throw new i.PrivyConnectorError("Unable to retrieve address");if(this.walletProvider?.session?.peer.metadata.url){let e=h.getWalletEntryByUrl(this.walletProvider?.session?.peer.metadata.url);this.walletEntry=e?.entry,this.walletClientType=e?.walletClientType||"unknown",this.proxyProvider.rpcTimeoutDuration=l.getRpcTimeout(this.rpcConfig,this.walletClientType)}this.connected=!0,await this.syncAccounts(t),e()})().catch((e=>{r(e?a.formatConnectorError(e):new i.PrivyConnectorError("Unknown error during connection"))})).finally((()=>this.modal?.closeModal()))}))}disconnect(){this.walletProvider?.disconnect().then((()=>this.onDisconnect())).catch((()=>console.warn("Unable to disconnect Wallet Connect provider")))}get walletProvider(){return this.proxyProvider.walletProvider}setWalletProvider(e){this.proxyProvider.setWalletProvider(e)}async createProvider(){let i={};for(let e of this.chains){let r=n.getJsonRpcEndpoint(e.id,this.chains,this.rpcConfig,this.privyAppId);r&&(i[e.id]=r)}let t=this.shouldEnforceDefaultChainOnConnect?[this.defaultChain.id]:[],s=this.chains.map((e=>e.id)),a=await e.EthereumProvider.init({projectId:this.walletConnectCloudProjectId,chains:t,optionalChains:s,optionalEvents:e.OPTIONAL_EVENTS,optionalMethods:e.OPTIONAL_METHODS,rpcMap:i,showQrModal:!1,metadata:{description:this.privyAppName,name:this.privyAppName,url:window.location.toString(),icons:[]}});return a.on("display_uri",(e=>{if(a.signer.abortPairingAttempt(),this.walletEntry){let{redirect:i,href:t}=h.buildTargetUrl(e,this.walletEntry);h.setWalletConnectDeepLink({href:t,name:this.walletEntry.displayName}),this.redirectUri=i;let s=h.buildUniversalFallbackUrl(e,this.walletEntry);s?.redirect&&(this.fallbackUniversalRedirectUri=s.redirect),r.isMobile&&h.openHref(i,"_self"),this.showPrivyQrModal?.({native:i,universal:this.fallbackUniversalRedirectUri})}else this.modal?.openModal({uri:e,chains:[this.defaultChain.id]})})),a.on("connect",(()=>{if(this.modal?.closeModal(),a.session?.peer.metadata.url){let e=h.getWalletEntryByUrl(a.session?.peer.metadata.url);this.walletEntry=e?.entry,this.walletClientType=e?.walletClientType||"unknown"}})),a}async enableProvider(){return this.walletProvider?.connected?Promise.resolve(this.walletProvider.accounts):await(this.walletProvider?.enable())}setWalletEntry(e,r){this.walletEntry=e,this.showPrivyQrModal=r}constructor(e,r,i,t,s,n,a,o){super(o||"unknown",i,t,r),this.connectorType="wallet_connect_v2",this.privyAppId=n,this.privyAppName=a,this.walletConnectCloudProjectId=e,this.rpcConfig=r,this.shouldEnforceDefaultChainOnConnect=s,this.proxyProvider=new c.PrivyProxyProvider(void 0,this.rpcTimeoutDuration),o&&(this.walletEntry=h.WALLET_CONNECT_REGISTRY[o],this.walletClientType=o)}}exports.WalletConnectV2WalletConnector=d;
