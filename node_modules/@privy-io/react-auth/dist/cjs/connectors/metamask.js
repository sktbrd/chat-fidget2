"use strict";var e=require("@ethersproject/address"),r=require("@ethersproject/providers"),t=require("react-device-detect"),s=require("../errors.js"),i=require("./errors.js"),o=require("./injected.js");require("ofetch"),require("@ethersproject/logger"),require("@privy-io/js-sdk-core"),require("../svg/browser-extension-wallet-icon.js"),require("react/jsx-runtime"),require("../svg/metamask.js"),require("../svg/phantom.js"),require("./ethereum/index.js"),require("../constants.js"),require("../storage.js"),require("../utils/index.js"),require("./get-legacy-injected-providers.js"),require("./is-wallet-installed.js"),require("./areWalletArraysEqual.js"),require("./isBaseConnectedEthereumWallet.js"),require("./base.js"),require("eventemitter3"),require("./getRpcTimeout.js"),require("./privyProxyProvider.js");class n extends o.Injected6963WalletConnector{disconnect(){console.warn("MetaMask does not support programmatic disconnect.")}async promptConnection(){try{t.isMobile||await this.proxyProvider.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]});let e=await this.proxyProvider.request({method:"eth_requestAccounts"});if(!e||0===e.length||!e[0])throw new s.PrivyConnectorError("Unable to retrieve accounts");await this.syncAccounts([e[0]])}catch(e){throw i.formatConnectorError(e)}}}exports.MetamaskWalletConnector=n,exports.currentConnectedMetamaskAddress=async()=>{let t=new r.Web3Provider(window.ethereum),s=await t.listAccounts();return 0===s.length?null:e.getAddress(s[0])};
