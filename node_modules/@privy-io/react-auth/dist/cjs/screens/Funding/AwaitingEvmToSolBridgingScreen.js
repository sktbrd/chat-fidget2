"use strict";var e=require("react/jsx-runtime"),r=require("@heroicons/react/24/outline/CheckCircleIcon"),n=require("react"),i=require("viem"),t=require("../../components/Layouts.js"),o=require("../../components/ModalFooter.js"),s=require("../../components/ScreenHeader.js"),a=require("../../components/embedded-wallets/FundWalletMethodHeader.js"),c=require("../../components/primitives/NeutralSpinner/index.js"),u=require("../../connectors/chains/utils.js"),l=require("../../constants.js"),d=require("../../errors.js"),h=require("../../hooks/internal-context.js"),q=require("../../hooks/modal-context.js"),g=require("../../hooks/useGetTokenPrice.js"),j=require("../../hooks/useWallets.js"),p=require("../../lib/external-wallets/displayHelpers.js"),m=require("../../lib/funding/analytics.js"),f=require("../../lib/funding/reservoir.js"),v=require("../../lib/solana/index.js"),y=require("../../lib/solana/transaction.js"),C=require("../../lib/wallets/actions/getBalanceForChains.js"),S=require("../../plugins/context/PrivyPluginContext.js"),I=require("../../plugins/solana-funding/id.js"),b=require("../../utils/index.js"),E=require("../index.js"),w=require("./BridgeNetworkSelectionView.js"),A=require("./TransferOrBridgeLoadingScreen.js");function N(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}require("styled-components"),require("../../svg/protected-by-privy.js"),require("../../components/ModalHeader.js"),require("@heroicons/react/24/outline/ArrowLeftIcon"),require("@heroicons/react/24/outline/ArrowRightIcon"),require("@heroicons/react/24/outline/QuestionMarkCircleIcon"),require("@heroicons/react/24/outline/XMarkIcon"),require("../../configuration/context.js"),require("../../config.js"),require("../../configuration/defaultClientConfig.js"),require("../../configuration/login-methods.js"),require("../../configuration/wallets.js"),require("../../connectors/chains/index.js"),require("../../connectors/chains/arbitrum.js"),require("../../connectors/chains/arbitrumSepolia.js"),require("../../connectors/chains/avalanche.js"),require("../../connectors/chains/avalancheFuji.js"),require("../../connectors/chains/base.js"),require("../../connectors/chains/baseSepolia.js"),require("../../connectors/chains/berachainArtio.js"),require("../../connectors/chains/celo.js"),require("../../connectors/chains/celoAlfajores.js"),require("../../connectors/chains/filecoin.js"),require("../../connectors/chains/filecoinCalibration.js"),require("../../connectors/chains/garnetHolesky.js"),require("../../connectors/chains/holesky.js"),require("../../connectors/chains/linea.js"),require("../../connectors/chains/lineaTestnet.js"),require("../../connectors/chains/lukso.js"),require("../../connectors/chains/mainnet.js"),require("../../connectors/chains/optimism.js"),require("../../connectors/chains/optimismSepolia.js"),require("../../connectors/chains/polygon.js"),require("../../connectors/chains/polygonAmoy.js"),require("../../connectors/chains/redstone.js"),require("../../connectors/chains/sepolia.js"),require("../../connectors/chains/zora.js"),require("../../connectors/chains/zoraSepolia.js"),require("../../connectors/chains/zoraTestnet.js"),require("../../theme.js"),require("tinycolor2"),require("../../lib/cybr53.js"),require("../../hooks/index.js"),require("ofetch"),require("../../components/PrefetchedImage.js"),require("../../hooks/useGetSolPrice.js"),require("../../svg/brave-browser-icon.js"),require("../../svg/bybit.js"),require("../../svg/coinbase-wallet.js"),require("../../svg/cryptocom.js"),require("../../svg/metamask.js"),require("../../svg/phantom.js"),require("../../svg/rabby.js"),require("../../svg/rainbow.js"),require("../../svg/safe.js"),require("../../svg/uniswap.js"),require("../../svg/universal-profile.js"),require("../../svg/wallet-connect.js"),require("../../svg/zerion.js"),require("../../utils/buffer/readBigInt64LE.js"),require("@ethersproject/providers"),require("../../connectors/get-legacy-injected-providers.js"),require("../../connectors/is-wallet-installed.js"),require("@privy-io/js-sdk-core"),require("../../components/Button.js"),require("../../components/Loader.js"),require("../../components/ui/layout/Row.js"),require("../../components/ui/typography/ErrorMessage.js"),require("../../components/ui/typography/LabelSm.js"),require("../../components/ui/typography/Subtitle.js"),require("../../components/ui/typography/Title.js"),require("../../components/ui/wallet/NetworkBalanceCard.js"),require("@heroicons/react/24/outline/WalletIcon"),require("../../components/ui/chips/Chip.js"),require("../../components/ui/animation/LoadingSkeleton.js"),require("../../components/ui/typography/Value.js"),require("../../components/ui/wallet/NetworkIcon.js"),require("@heroicons/react/24/outline/GlobeAltIcon"),require("../../components/ui/icons/Arbitum.js"),require("../../components/ui/icons/Avalanche.js"),require("../../components/ui/icons/Base.js"),require("../../components/ui/icons/Celo.js"),require("../../components/ui/icons/Linea.js"),require("../../components/ui/icons/Mainnnet.js"),require("../../components/ui/icons/Optimism.js"),require("../../components/ui/icons/Polygon.js"),require("../../components/ui/icons/Solana.js"),require("../../components/ui/icons/Zora.js"),require("../../components/ui/wallet/shared.js"),require("../../components/ui/wallet/NetworkSelectorPanel.js"),require("@headlessui/react"),require("@heroicons/react/24/outline/ChevronDownIcon"),require("../../lib/ethers.js"),require("@ethersproject/bignumber"),require("@ethersproject/units"),require("./styles.js"),require("../LinkPasskeyScreen.js"),require("@heroicons/react/24/outline/ClockIcon"),require("@heroicons/react/24/outline/TrashIcon"),require("@heroicons/react/24/solid/CheckBadgeIcon"),require("@heroicons/react/24/solid/LockClosedIcon"),require("../../hooks/privy-context.js"),require("../../svg/face-id.js"),require("../../svg/fingerprint.js"),require("../MfaScreens/StyledComponents.js"),require("../../components/external-wallets/InjectedWalletIcon.js"),require("../../components/ui/wallet/Address.js"),require("@heroicons/react/24/outline/CheckIcon"),require("@heroicons/react/24/outline/Square2StackIcon");var T=/*#__PURE__*/N(r);exports.AwaitingEvmToSolBridgingScreen=()=>{let{rpcConfig:r,appId:N,closePrivyModal:x,createAnalyticsEvent:_}=h.usePrivyInternal(),{navigate:L,setModalData:P,app:k,data:F}=q.usePrivyModal(),{wallets:R}=j.useWallets(),B=S.usePlugins(),[M,U]=n.useState(null),[O,W]=n.useState(null),[D,G]=n.useState([]),[H,Y]=n.useState(0),[Q,V]=n.useState(!1),[$,z]=n.useState(!1),[X,J]=n.useState(!1),[Z,K]=n.useState(!1);if(!F?.funding||"solana"!==F.funding.chainType)throw Error("Invalid funding data");let{address:ee,cluster:re,connectedWalletAddress:ne}=F.funding,[ie,te]=n.useState(F.funding.amount),oe=ne?R.find((({address:e})=>e===ne)):R[0],[se,ae]=n.useState(null);n.useEffect((()=>{(async()=>{if(!oe)return;let e=await oe.getEthereumProvider();ae(i.createWalletClient({account:oe.address,transport:i.custom(e)}).extend(i.publicActions))})().catch(console.error)}),[oe]);let[ce,ue]=n.useState(0n),le=y.getNativeCurrencyFromLamports(ce);n.useEffect((()=>{let e=B(I.SOLANA_FUNDING_PLUGIN_ID);e?e.getBalance({address:ee,cluster:re}).then((e=>ue(BigInt(e)))):console.warn("Unable to load solana plugin, skipping balance")}),[]);let[de,he]=n.useState(),{tokenPrice:qe}=g.useGetTokenPrice("solana"),{fundingAmountInBaseUnit:ge,fundingAmountInUsd:je}=y.getSolanaFormattedAmounts({amount:ie,fee:0n,tokenPrice:qe});n.useEffect((()=>{(async()=>{if(!se||!oe)return;let e=["testnet","devnet"].includes(re.name);e&&console.warn("Solana testnets are not supported for bridging");let n=u.addToDefaultChains(k.chains).filter((({testnet:r})=>!!r===e)),i=(await C.getBalanceForChains({chains:n,address:oe.address,appId:N,rpcConfig:r})).filter((e=>e.balance>0n));if(i.length<1)return void U(new d.PrivyClientError(`Wallet ${b.formatWalletAddress(oe.address)} does not have enough funds.`,void 0,d.PrivyErrorCode.INSUFFICIENT_BALANCE));i.sort(((e,r)=>Number(r.balance-e.balance)));let t=(await Promise.allSettled(i.map((async e=>({...e,quote:await f.getQuote({isTestnet:!1,input:f.toGetQuoteInput({amount:ge.toString(),user:oe.address,recipient:ee,destinationChainId:v.RELAY_SOLANA_MAINNET_CLUSTER_CHAIN_ID,destinationCurrency:v.RELAY_SOLANA_NATIVE_CURRENCY_ID,originChainId:e.chain.id})})}))))).filter((e=>"fulfilled"===e.status)).map((e=>e.value));if(t.length<1)return void U(new d.PrivyClientError(`Unable to fetch quotes for bridging. Wallet ${b.formatWalletAddress(oe.address)} does not have enough funds.`,void 0,d.PrivyErrorCode.INSUFFICIENT_BALANCE));let o=t.map((({quote:e,balance:r,chain:n})=>({bridgeTx:f.toEvmTransactionRequestInfoFromQuote(e),balance:r,chain:n}))).filter((({bridgeTx:e})=>!!e));if(o.length>1)return void G(o);let s=o.at(0);s?(z(!0),he({data:s.bridgeTx.data,to:s.bridgeTx.to,value:s.bridgeTx.value,chain:s.chain})):U(new d.PrivyClientError(`Unable to select bridge option from quotes. Wallet ${b.formatWalletAddress(oe.address)} does not have enough funds.`,void 0,d.PrivyErrorCode.INSUFFICIENT_BALANCE))})().catch(console.error)}),[se]),n.useEffect((()=>{(async()=>{let e,n;if(!se||!oe||Q||X||!de)return;V(!0);let t=i.createPublicClient({chain:de.chain,transport:i.http(b.getJsonRpcEndpointFromChain(de.chain,r,N))});try{e=await t.prepareTransactionRequest({account:oe.address,to:de.to,chain:de.chain,data:de.data,value:BigInt(de.value??0)})}catch(e){console.error(e),D.length>1&&W(e.shortMessage??"Something went wrong")}if(e){V(!1),J(!0);try{await se.switchChain({id:de.chain.id})}catch(e){await se.addChain({chain:de.chain}),await se.switchChain({id:de.chain.id})}try{n=await se.sendTransaction(e),_({eventName:m.ON_RAMP_COMPLETE_ANALYTICS_EVENT,payload:{provider:"external",status:"success",address:oe.address,chainId:de.chain.id,value:de.value?.toString(),txHash:n}})}catch(e){console.error(e),"TransactionExecutionError"===e.name&&(D.length<1?U(new d.PrivyClientError(e.shortMessage,void 0,d.PrivyErrorCode.TRANSACTION_FAILURE)):W(e.shortMessage??"Something went wrong"))}n?(await se.waitForTransactionReceipt({hash:n}),J(!1),K(!0)):J(!1)}else V(!1)})().catch(console.error)}),[se,de]),n.useEffect((()=>{if(!M)return;let e={error:M,previousScreen:E.ModalScreen.FUNDING_TRANSFER_FROM_WALLET_SCREEN};P({funding:F?.funding,sendTransaction:F?.sendTransaction,errorModalData:e}),L(E.ModalScreen.ERROR_SCREEN,!1)}),[M]);let pe=oe?p.toDisplayName(oe.walletClientType,oe.connectorType,oe.walletClientType)||"wallet":null;if(n.useEffect((()=>{if(!Z)return;let e=setTimeout(x,l.DEFAULT_SUCCESS_SCREEN_EXTRA_LONG_DURATION_MS);return()=>clearTimeout(e)}),[Z]),Z/*#__PURE__*/)return e.jsxs(e.Fragment,{children:[/*#__PURE__*/e.jsx(a.default,{}),/*#__PURE__*/e.jsx(t.RefactorSpacerTop,{}),/*#__PURE__*/e.jsxs(t.CenteredItemWithGap,{children:[/*#__PURE__*/e.jsx(T.default,{color:"var(--privy-color-success)",width:"64px",height:"64px"}),/*#__PURE__*/e.jsx(s.CenteredScreenHeader,{title:"Success!",description:`You’ve successfully added ${ie} SOL to your ${k.name} wallet. It may take a minute before the funds are available to use.`})]}),/*#__PURE__*/e.jsx(t.RefactorSpacerBottom,{}),/*#__PURE__*/e.jsx(o.BlobbyFooter,{})]});let me=D[H];return D.length>1&&me?/*#__PURE__*/e.jsx(w.BridgeNetworkSelectionView,{displayName:pe,configuredFundingChain:re,formattedBalance:le,fundingAmount:ie,fundingCurrency:"SOL",fundingAmountInUsd:je,options:D,selectedOption:me,isPreparing:Q,isSubmitting:X,addressToFund:ee,fundingWalletAddress:oe?.address||"",errorMessage:O,onSubmit:()=>{F.funding?.amount!==ie?async function(){if(oe&&me)try{let e=await f.getQuote({isTestnet:!1,input:f.toGetQuoteInput({amount:ge.toString(),user:oe.address,recipient:ee,destinationChainId:v.RELAY_SOLANA_MAINNET_CLUSTER_CHAIN_ID,destinationCurrency:v.RELAY_SOLANA_NATIVE_CURRENCY_ID,originChainId:me.chain.id})}),r=f.toEvmTransactionRequestInfoFromQuote(e);if(!r)throw Error("Invalid transaction request");z(!0),he({data:r.data,to:r.to,value:r.value,chain:me.chain})}catch(e){console.error(e),U(new d.PrivyClientError("Unable to fetch quotes for bridging",e,d.PrivyErrorCode.INSUFFICIENT_BALANCE))}}().catch(console.error):he({to:me.bridgeTx.to,data:me.bridgeTx.data,value:me.bridgeTx.value,chain:me.chain})},onSelect:e=>{e!==H&&(W(null),Y(e))},onAmountChange:te}):X&&oe?/*#__PURE__*/e.jsx(A.TransferOrBridgeLoadingScreen,{wallet:oe,displayName:pe,addressToFund:ee,isBridging:$,isErc20Flow:!1,chainId:"solana",chainName:re.name,totalPriceInUsd:void 0,totalPriceInNativeCurrency:void 0,gasPriceInUsd:void 0,gasPriceInNativeCurrency:void 0}):
/*#__PURE__*/e.jsxs(e.Fragment,{children:[/*#__PURE__*/e.jsx(a.default,{}),/*#__PURE__*/e.jsx(c.NeutralSpinner,{}),/*#__PURE__*/e.jsx("div",{style:{marginTop:"1rem"}}),/*#__PURE__*/e.jsx(o.BlobbyFooter,{})]})};
