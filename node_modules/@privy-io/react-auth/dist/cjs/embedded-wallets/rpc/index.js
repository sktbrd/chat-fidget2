"use strict";var e=require("@ethersproject/providers"),t=require("@privy-io/js-sdk-core"),r=require("../../constants.js");exports.formatReceipt=function(e){return{to:e.to,from:e.from,contractAddress:e.contractAddress,transactionIndex:e.transactionIndex,root:e.root,logsBloom:e.logsBloom,blockHash:e.blockHash,transactionHash:e.transactionHash,logs:e.logs,blockNumber:e.blockNumber,confirmations:e.confirmations,byzantium:e.byzantium,type:e.type,status:e.status,gasUsed:e.gasUsed.toHexString(),cumulativeGasUsed:e.cumulativeGasUsed.toHexString(),effectiveGasPrice:e.effectiveGasPrice?e.effectiveGasPrice.toHexString():void 0}},exports.getAndCheckBalance=async function(e,r,a,n){let s=await n.getBalance(e),i=r.value||0,o=!s.sub(t.QuantityToBigNumber(i)).sub(a).isNegative();return{balance:s,hasSufficientFunds:o}},exports.getEtherPrice=async function(){let t=new e.EtherscanProvider(r.CHAIN_ID_MAINNET,r.PRIVY_ETHERSCAN_ID);return await t.getEtherPrice()},exports.sendTransaction=async function({accessToken:e,entropyId:t,entropyIdVerifier:a,transactingWallet:n,walletProxy:s,transactionRequest:i,provider:o,requesterAppId:c}){!function(e){for(let t of["gasLimit","gasPrice","value","maxPriorityFeePerGas","maxFeePerGas"]){let r=e[t];if(void 0!==r&&!function(e){let t="number"==typeof e,r="bigint"==typeof e,a="string"==typeof e&&/^-?0x[a-f0-9]+$/i.test(e);return t||r||a}(r))throw Error(`Transaction request property '${t}' must be a valid number, bigint, or hex string representing a quantity`)}if("number"!=typeof e.chainId)throw Error("Transaction request property 'chainId' must be a number")}(i=Object.assign({chainId:r.CHAIN_ID_MAINNET},i));let u=(await s.rpc({entropyId:t,entropyIdVerifier:a,hdWalletIndex:n.walletIndex??0,chainType:"ethereum",accessToken:e,requesterAppId:c,request:{method:"eth_signTransaction",params:[i]}})).response.data;return await o.sendTransaction(u)};
