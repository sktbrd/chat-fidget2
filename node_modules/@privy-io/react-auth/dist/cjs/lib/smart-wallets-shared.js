"use strict";var e=require("permissionless"),t=require("permissionless/accounts"),r=require("permissionless/clients/pimlico"),n=require("viem"),i=require("viem/account-abstraction"),a=require("@privy-io/js-sdk-core");let s={address:i.entryPoint06Address,version:"0.6"},o={address:i.entryPoint07Address,version:"0.7"},c=({owner:e,smartWalletType:r,publicClient:n})=>{switch(r){case a.SAFE:return t.toSafeSmartAccount({client:n,entryPoint:o,owners:[e],version:"1.4.1"});case a.KERNEL:return t.toEcdsaKernelSmartAccount({client:n,version:"0.3.1",entryPoint:o,owners:[e]});case a.BICONOMY:return t.toBiconomySmartAccount({client:n,owners:[e],entryPoint:s});case a.LIGHT_ACCOUNT:return t.toLightSmartAccount({client:n,entryPoint:s,owner:e,version:"1.1.0"});case a.COINBASE_SMART_WALLET:return async function({client:e,owner:t}){let[r]=await t.request({method:"eth_accounts"});if(!r)throw Error("Unable to request embedded owner for eth_accounts");return await i.toCoinbaseSmartAccount({client:e,owners:[{type:"local",source:"privy",address:r,sign:async({hash:e})=>await t.request({method:"secp256k1_sign",params:[e]})}]})}({client:n,owner:e});default:throw Error(`Invalid smart account type: ${r}.`)}},l=["rpc.zerodev.app","public.pimlico.io","api.pimlico.io"];exports.signerToSmartAccountClient=async({owner:t,smartWalletType:i,chain:a,publicClient:s,bundlerUrl:o,paymasterUrl:u,paymasterContext:m})=>{let p=await c({owner:t,smartWalletType:i,publicClient:s}),y=r.createPimlicoClient({transport:n.http(o),entryPoint:p.entryPoint}),d=u?r.createPimlicoClient({transport:n.http(u),entryPoint:p.entryPoint}):void 0;return e.createSmartAccountClient({account:p,chain:a,paymaster:d,paymasterContext:m,bundlerTransport:n.http(o),userOperation:{estimateFeesPerGas:async()=>{if(l.some((e=>o.includes(e))))return await y.getUserOperationGasPrice().then((e=>e.fast));{let e=await s.estimateFeesPerGas(),t=o.includes("api.developer.coinbase.com")?175n:150n;return{...e,maxFeePerGas:e.maxFeePerGas*t/100n,maxPriorityFeePerGas:e.maxPriorityFeePerGas*t/100n}}}}})};
