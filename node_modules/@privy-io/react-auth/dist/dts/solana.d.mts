import { W as Wallet } from './types-BR6iorWt.js';
export { C as ConnectedSolanaWallet, S as SolanaAdapterConnector, a as SolanaTransactionReceipt, b as SupportedSolanaTransaction, t as toSolanaWalletConnectors } from './types-BR6iorWt.js';
export { a as UseFundSolanaWalletInterface, U as UseSolanaWalletsInterface, b as useFundWallet, u as useSolanaWallets } from './useFundSolanaWallet-Dz8nYtDg.js';
import '@ethersproject/providers';
import '@solana/wallet-adapter-base';
import 'react';
import 'viem';
import 'web3-core';
import '@privy-io/js-sdk-core';
import '@privy-io/public-api';
import 'eventemitter3';
import '@metamask/eth-sig-util';
import '@solana/web3.js';

interface UseImportWalletInterface {
    /**
     * Imports a private key to be used as an embedded wallet for the user
     * This method will error if the user already has an imported wallet or if they
     * exit in the middle of the flow.
     *
     * @param o Input object
     * @param o.privateKey The base58 private key of the solana wallet to import
     *
     * @returns The imported wallet
     */
    importWallet: (input: {
        privateKey: string;
    }) => Promise<Wallet>;
}
/**
 * Use this hook to import an external solana wallet into an embedded wallet via its private key
 *
 * @returns The `importWallet` method
 */
declare const useImportWallet: () => UseImportWalletInterface;

declare const useSolanaFundingPlugin: () => void;

export { type UseImportWalletInterface, useImportWallet, useSolanaFundingPlugin };
